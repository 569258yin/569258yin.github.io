{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/2016-11-22/github_sign_up.png","path":"img/2016-11-22/github_sign_up.png","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"source/img/2016-11-22/github_signup_info.png","path":"img/2016-11-22/github_signup_info.png","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1489408760556},{"_id":"themes/icarus/_config.yml","hash":"c702e87add311a0af85b923087443a9b6e3cd00d","modified":1489408760564},{"_id":"themes/icarus/README.md","hash":"b2df0535d62f2729c256a67ac86f066cd984e5bd","modified":1489408760564},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1489408760940},{"_id":"source/_posts/Hexo搭建博客小白教程.md","hash":"978aa7d8cee97b00437199323b16dd53c1c29dee","modified":1489408760539},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1489408760548},{"_id":"source/_posts/javaweb与app实现文件上传.md","hash":"89671f7c3d6f1738d5aa017a648957fa10c9a159","modified":1489412240657},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1489408760572},{"_id":"themes/icarus/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1489408760572},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1489408760580},{"_id":"themes/icarus/languages/id.yml","hash":"2dc3671a92378f4bd499b0dcfb90170bb44c786b","modified":1489408760580},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1489408760580},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1489408760588},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1489408760588},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1489408760588},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1489408760588},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1489408760596},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1489408760596},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1489408760612},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1489408760612},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1489408760620},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1489408760772},{"_id":"themes/icarus/layout/layout.ejs","hash":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1489408760772},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1489408760780},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1489408760828},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1489408760905},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1489408760913},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1489408760946},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1489408760949},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123080021.png","hash":"0aae991f0677099995a99cf0fcc6894d30e9a459","modified":1489408760543},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123205751.png","hash":"8869752ffaae23c532c853f63643002394d2c549","modified":1489408760545},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123205923.png","hash":"af6a20a1aec3ef3a185cbd9f9c966e4582f042df","modified":1489408760546},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123210936.png","hash":"51d8f89d1d7fe72a7c431662bd26c04c22489593","modified":1489408760548},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123213034.png","hash":"ac01abe1909e1875da70cdb3c7e956d7b22613e9","modified":1489408760548},{"_id":"source/_posts/Hexo搭建博客小白教程/github_sign_up.png","hash":"f669d260d4c452f1a2efa97b3ed14e89399a7cc5","modified":1489408760548},{"_id":"source/img/2016-11-22/github_sign_up.png","hash":"f669d260d4c452f1a2efa97b3ed14e89399a7cc5","modified":1489408760548},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1489408760564},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1489408760564},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1489408760572},{"_id":"themes/icarus/layout/common/article.ejs","hash":"8772196f8341ccacf21d314fe1c3aacb460d848e","modified":1489408760664},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"d1812a87a26a48723c30d32bf4a1f57f3b01908e","modified":1489408760664},{"_id":"themes/icarus/layout/common/head.ejs","hash":"6b6063ff2f8f65cb4ce3fc6d197a81d30f813017","modified":1489408760680},{"_id":"themes/icarus/layout/common/header.ejs","hash":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1489408760688},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"d4dfa98d6481f9cd8f78b7a749276a76241b35d1","modified":1489408760739},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1489408760743},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"c2a2fc5dd40fa6349127c0eb3144e55dfa7555cf","modified":1489408760748},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1489408760748},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1489408760764},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"13f884f07e1ed39fde1a84cd51d45b4d90078b83","modified":1489408760620},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1489408760628},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1489408760641},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"c36e6b376647ae715d417cb928c2082ef56766a9","modified":1489408760648},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"8767c30714baf8011bb191b8a1c652ea114a53f2","modified":1489408760648},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1489408760656},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1489408760788},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1489408760796},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"91b40453f2f6ed5da1aa3a24a7d0f5d75a53e7bb","modified":1489408760828},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1489408760849},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1489408760849},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1489408760857},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1489408760865},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1489408760873},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1489408760873},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1489408760881},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1489408760889},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1489408760905},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1489408760905},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1489408760913},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1489408760913},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1489408760921},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1489408760929},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1489408760929},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1489408760938},{"_id":"themes/icarus/source/css/_extend.styl","hash":"74dc73324adde45f2635be99e7b44fd8939342e0","modified":1489408760949},{"_id":"themes/icarus/source/css/_variables.styl","hash":"28d73a420f32c73595fcc559528544cf998590c7","modified":1489408761173},{"_id":"themes/icarus/source/css/style.styl","hash":"8755894aa3e1e5c1f37f75bc7414ad8e8a031052","modified":1489408761181},{"_id":"themes/icarus/source/js/main.js","hash":"bb294083fe240c9a977296c909c3891f6bb8dc95","modified":1489408761189},{"_id":"themes/icarus/source/js/insight.js","hash":"154c023c13d913984e9f70e22affea1ee8abe444","modified":1489408761189},{"_id":"source/_posts/Hexo搭建博客小白教程/20161122214120.png","hash":"a5addb3b577c28a9baf8cd92023d37c989087126","modified":1489408760540},{"_id":"source/_posts/Hexo搭建博客小白教程/20161122214451.png","hash":"1426d94c337dc17bb62d5af7b8ca369216f69558","modified":1489408760541},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123075138.png","hash":"fb5294bd8dd7a68710eff205cf98779380606795","modified":1489408760543},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123210805.png","hash":"4d56f65657c4a24386687483674d539a72fab6a5","modified":1489408760547},{"_id":"source/_posts/Hexo搭建博客小白教程/github_signup_info.png","hash":"d53c1d959f8f1b7bb72daa507ad7230beacaa3be","modified":1489408760548},{"_id":"source/img/2016-11-22/github_signup_info.png","hash":"d53c1d959f8f1b7bb72daa507ad7230beacaa3be","modified":1489408760548},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1489408760696},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1489408760696},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1489408760704},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1489408760704},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1489408760712},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1489408760720},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1489408760712},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1489408760957},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1489408760957},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1489408760957},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1489408760965},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1489408760965},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1489408760957},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1489408760973},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1489408760973},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1489408760973},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1489408760973},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1489408760981},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1489408760981},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1489408760989},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1489408760989},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1489408760989},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1489408760997},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1489408760989},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1489408761005},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1489408760997},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1489408761008},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1489408761013},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1489408761015},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1489408761020},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1489408761023},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1489408761026},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1489408761028},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1489408761028},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1489408761028},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1489408761028},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1489408761037},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1489408761039},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1489408761041},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1489408761044},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1489408761047},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1489408761049},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1489408761049},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1489408761049},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1489408761057},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1489408761065},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1489408761065},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1489408761065},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1489408761073},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1489408761073},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1489408761073},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1489408761073},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1489408761081},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1489408761081},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1489408761081},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1489408761089},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1489408761089},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1489408761089},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1489408761097},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1489408761097},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1489408761097},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1489408761105},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1489408761105},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1489408761105},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1489408761105},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1489408761113},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1489408761113},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1489408761113},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1489408761121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1489408761121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1489408761121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1489408761121},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1489408761129},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1489408761129},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1489408761137},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1489408761140},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1489408761142},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1489408761165},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1489408761173},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"4dd216a147dd65ddc37521fe8a1a01aa929aeea5","modified":1489408761144},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"309936cf824fd809aff5b6c587ea2b6072f56c52","modified":1489408761147},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1489408761149},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1489408761149},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"218713de00dc6c503e7036fce2aab81dd94b4c0c","modified":1489408761149},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1489408761157},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"dfa3eab5933c6af4dfb7268c511157cbb926dcfa","modified":1489408761157},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"fb211c3c747565e6fa2304f436b42d14ef84d71a","modified":1489408761165},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1489408761165},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1489408761173},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1489408761181},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1489408761181},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1489408761281},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1489408761281},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1489408761514},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1489408761522},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1489408761197},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1489408761197},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1489408761281},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1489408761289},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1489408761289},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1489408761289},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1489408761289},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1489408761297},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1489408761297},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1489408761297},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1489408761305},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1489408761305},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1489408761305},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1489408761305},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1489408761305},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1489408761305},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1489408761313},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1489408761313},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1489408761313},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1489408761321},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1489408761329},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1489408761329},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1489408761329},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1489408761329},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1489408761329},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1489408761343},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1489408761349},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1489408761357},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1489408761365},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1489408761381},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1489408761397},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1489408761413},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1489408761413},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1489408761421},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1489408761441},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1489408761449},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1489408761466},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1489408761466},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1489408761474},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1489408761474},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1489408761474},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1489408761482},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1489408761482},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1489408761482},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1489408761490},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1489408761490},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1489408761490},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1489408761490},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1489408761497},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1489408761497},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1489408761505},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1489408761505},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1489408761505},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1489408761505},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1489408761514},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1489408761514},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1489408761514},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1489408761514},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1489408761522},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1489408761522},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1489408761265},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1489408761205},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1489408761221},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1489408761240},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1489408761243},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1489408761237},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1489408761229}],"Category":[{"name":"Hexo","_id":"cj085wmv10002wwayc4dg6qpu"},{"name":"Java","_id":"cj085wmv60005wwayr4t8ee95"}],"Data":[],"Page":[],"Post":[{"title":"Hexo搭建博客小白教程","date":"2016-11-21T23:44:12.000Z","_content":"\n### 前言·\n利用hexo在Github上搭建个人博客是我从我对象那里知道的，她学的前端，我学的Java，一直没了解过这个东西，前几天发现了，果断喜欢上了，以前都是在CSDN上写博客。\n然后，我就开始了研究，到了现在，终于好了，网上教程确实很多啊，但是其间也有一些问题，然后昨天，我女朋友问了几个问题(女友还是小白啊，毕竟妹子)，在添加主题的地方。\n比如：\n```\n\ngit clone http:.......git themes/icuals\ncd themes/icuals\ngit pull\n\n```\n这样我们觉得很简单的，对于刚学的妹子来说确实是一个挑战啊！！对于Lunix命令基本不懂得啊.So，我就写了这篇博客给我女友看，是不是很有爱的啊。\n\n### 参考\n先放我看过的教程，都可以提供参考的。\n[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)\n[hexo+github快速搭建个人博客](https://jayzangwill.github.io/blog/2016/07/31/hexo-github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more)\n\n### Github项目创建\n\n* 1.注册Github账号\n[Github官网](https://github.com/)\n{% asset_img github_sign_up.png [注册账号] %}\n点击上图的** sign up ** \n然后就进入下图填写个人注册信息的界面，上面还有总步骤说明\n{% asset_img github_signup_info.png [注册账号详情] %}\n然后把三个步骤走完就OK啦！这时候你就拥有了你的Github账号和远程仓库。\n\n* 2.创建项目\n在你登录过的Github界面，右上方找到一个 **+** 号，然后点击，再选择new repository,就是新建项目啦。\n{% asset_img 20161122214120.png [创建项目引导] %}\n然后就是新建项目界面，输入你要新建的项目名称，这里我们要建一个博客，所有名字要为你的Github账号加上**.github.io**\n比如我的Github账号为**569258yin**，那我创建的项目名称就为**569258yin.github.io**,下图可以看到我的项目名称已经存在了。\n{% asset_img 20161122214451.png [] %}\n然后描述内容可以不写，或者写...（*对了，免费版的Github账号都是public的，也就是你的项目被人都可以看到，但是别人是没有权利修改的*）\n\n* 3.创建分支\n\n        创建分支为了我们能够在不同的电脑上方便修改博客，首先，Github上master主分支存放\n        的是hexo将我们的源文件转化生成的静态网页，是不存储我们实际操作的源文件的，我刚开\n        始也不知道，然后去了公司，从Github上克隆了我的项目，准备做修改呢，结果全是静态网\n        页，并不能直接修改，所有参考了知乎上大神给的方法。\n        \n    ** 项目分为两个分支：master主分支用了存放静态网页，hexo(名字随意)分支用了存放项目源文件 **\n\n当刚创好分支，如果你还没添加任何描述，项目界面是这样的\n{% asset_img 20161123075138 [] %}\n如果你的也是，就点图中红色标注的**README**，然后就可以添加一些描述啦。这里可以简单写一句话，关于如何使用README，可另行百度。\n如果你的界面是下面的这种，那就可以直接点**Branch:master**,(*branch的意思就是分支,master代表主分支*)，在文本框中输入hexo（分支名）\n然后点击create branch:hexo就可以了。\n{% asset_img 20161123080021.png []%}\n\n* 4.设置hexo分支为默认分支\n点击项目设置,进到如下界面\n{% asset_img 20161123205751.png [] %}\n然后再选择Branch设置，可以看到当前默认分支为master，点击选择我们创建的hexo，然后点击右边update就可以了\n{% asset_img 20161123205923.png []%}\n\n\n### 本地搭建Hexo博客\n* 1.在本地创建一个文件夹，比如我的取名为hexo，然后鼠标右键git branch，调出git控制台工具。如果你还没有装过这个软件，\n那就需要先安装[软件下载地址](https://git-for-windows.github.io),不会安装的同学可以参考\n[廖雪峰的Git安装教程及使用说明](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000)\n打开控制台后输入\n\n`\ngit clone https://github.com/569258yin/test.github.io.git\n`\n\n克隆你在Github创建的项目到本地，后面的网址是我的，你的项目网址在Github网站项目可以查看到，如下图：\n{% asset_img 20161123210805.png [] %}\n克隆完成后就会在hexo生成对应的项目文件夹\n{% asset_img 20161123210936.png [] %}\n\n* 2.安装Node.js\n\n下载地址：[Node官网](https://nodejs.org/en/)，下载任意版本，安装就可以了，这个很简单。安装完成可以在git bash控制台输入 **node -v ** 如果能显示版本号就说明安装成功！\n\n* 3.安装hexo插件\n\n在git bash中利用node 自带的包管理器进行安装：\n\n```\n输入 npm install -g hexo(或者npm i -g hexo)\n```\n\n* 4.初始化hexo\n\n首先需要将git bash 当前文件路径选到你的项目根目录下，不会命令的可以直接将当前的git bash关掉，然后直接鼠标点进去项目文件夹，鼠标右键选择 git bash 就可以了\n然后执行\n\n```\nhexo init\n```\n\n这一步，我只能说超级慢的啊，视网络情况，反正我是等了很久.......\n\n* 5.测试是否安装完毕\n\n```\n输入  hexo generate(或 hexo g)\n```\n\n初始化本地文件，这时候hexo会把我们的源文件转化为静态网页，\n\n然后\n\n```\n输入  hexo server(或 hexo s)\n```\n\n{% asset_img 20161123213034.png [] %}\n意思是在本地创建一个服务器用了展示我们生成的网页，这一步是非常方便的，以后我们有任何修改只需在本地查看，确保正确后再发布到github上。\n\n之后打开你电脑上的浏览器，输入http:\\\\localhost:4000访问，能显示就说明大功告成啦，安装完毕！！！\n\n### 将本地项目源文件上传到Github上","source":"_posts/Hexo搭建博客小白教程.md","raw":"---\ntitle: Hexo搭建博客小白教程\ndate: 2016-11-22 07:44:12\ncategories: Hexo\ntags: hexo\n---\n\n### 前言·\n利用hexo在Github上搭建个人博客是我从我对象那里知道的，她学的前端，我学的Java，一直没了解过这个东西，前几天发现了，果断喜欢上了，以前都是在CSDN上写博客。\n然后，我就开始了研究，到了现在，终于好了，网上教程确实很多啊，但是其间也有一些问题，然后昨天，我女朋友问了几个问题(女友还是小白啊，毕竟妹子)，在添加主题的地方。\n比如：\n```\n\ngit clone http:.......git themes/icuals\ncd themes/icuals\ngit pull\n\n```\n这样我们觉得很简单的，对于刚学的妹子来说确实是一个挑战啊！！对于Lunix命令基本不懂得啊.So，我就写了这篇博客给我女友看，是不是很有爱的啊。\n\n### 参考\n先放我看过的教程，都可以提供参考的。\n[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)\n[hexo+github快速搭建个人博客](https://jayzangwill.github.io/blog/2016/07/31/hexo-github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more)\n\n### Github项目创建\n\n* 1.注册Github账号\n[Github官网](https://github.com/)\n{% asset_img github_sign_up.png [注册账号] %}\n点击上图的** sign up ** \n然后就进入下图填写个人注册信息的界面，上面还有总步骤说明\n{% asset_img github_signup_info.png [注册账号详情] %}\n然后把三个步骤走完就OK啦！这时候你就拥有了你的Github账号和远程仓库。\n\n* 2.创建项目\n在你登录过的Github界面，右上方找到一个 **+** 号，然后点击，再选择new repository,就是新建项目啦。\n{% asset_img 20161122214120.png [创建项目引导] %}\n然后就是新建项目界面，输入你要新建的项目名称，这里我们要建一个博客，所有名字要为你的Github账号加上**.github.io**\n比如我的Github账号为**569258yin**，那我创建的项目名称就为**569258yin.github.io**,下图可以看到我的项目名称已经存在了。\n{% asset_img 20161122214451.png [] %}\n然后描述内容可以不写，或者写...（*对了，免费版的Github账号都是public的，也就是你的项目被人都可以看到，但是别人是没有权利修改的*）\n\n* 3.创建分支\n\n        创建分支为了我们能够在不同的电脑上方便修改博客，首先，Github上master主分支存放\n        的是hexo将我们的源文件转化生成的静态网页，是不存储我们实际操作的源文件的，我刚开\n        始也不知道，然后去了公司，从Github上克隆了我的项目，准备做修改呢，结果全是静态网\n        页，并不能直接修改，所有参考了知乎上大神给的方法。\n        \n    ** 项目分为两个分支：master主分支用了存放静态网页，hexo(名字随意)分支用了存放项目源文件 **\n\n当刚创好分支，如果你还没添加任何描述，项目界面是这样的\n{% asset_img 20161123075138 [] %}\n如果你的也是，就点图中红色标注的**README**，然后就可以添加一些描述啦。这里可以简单写一句话，关于如何使用README，可另行百度。\n如果你的界面是下面的这种，那就可以直接点**Branch:master**,(*branch的意思就是分支,master代表主分支*)，在文本框中输入hexo（分支名）\n然后点击create branch:hexo就可以了。\n{% asset_img 20161123080021.png []%}\n\n* 4.设置hexo分支为默认分支\n点击项目设置,进到如下界面\n{% asset_img 20161123205751.png [] %}\n然后再选择Branch设置，可以看到当前默认分支为master，点击选择我们创建的hexo，然后点击右边update就可以了\n{% asset_img 20161123205923.png []%}\n\n\n### 本地搭建Hexo博客\n* 1.在本地创建一个文件夹，比如我的取名为hexo，然后鼠标右键git branch，调出git控制台工具。如果你还没有装过这个软件，\n那就需要先安装[软件下载地址](https://git-for-windows.github.io),不会安装的同学可以参考\n[廖雪峰的Git安装教程及使用说明](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000)\n打开控制台后输入\n\n`\ngit clone https://github.com/569258yin/test.github.io.git\n`\n\n克隆你在Github创建的项目到本地，后面的网址是我的，你的项目网址在Github网站项目可以查看到，如下图：\n{% asset_img 20161123210805.png [] %}\n克隆完成后就会在hexo生成对应的项目文件夹\n{% asset_img 20161123210936.png [] %}\n\n* 2.安装Node.js\n\n下载地址：[Node官网](https://nodejs.org/en/)，下载任意版本，安装就可以了，这个很简单。安装完成可以在git bash控制台输入 **node -v ** 如果能显示版本号就说明安装成功！\n\n* 3.安装hexo插件\n\n在git bash中利用node 自带的包管理器进行安装：\n\n```\n输入 npm install -g hexo(或者npm i -g hexo)\n```\n\n* 4.初始化hexo\n\n首先需要将git bash 当前文件路径选到你的项目根目录下，不会命令的可以直接将当前的git bash关掉，然后直接鼠标点进去项目文件夹，鼠标右键选择 git bash 就可以了\n然后执行\n\n```\nhexo init\n```\n\n这一步，我只能说超级慢的啊，视网络情况，反正我是等了很久.......\n\n* 5.测试是否安装完毕\n\n```\n输入  hexo generate(或 hexo g)\n```\n\n初始化本地文件，这时候hexo会把我们的源文件转化为静态网页，\n\n然后\n\n```\n输入  hexo server(或 hexo s)\n```\n\n{% asset_img 20161123213034.png [] %}\n意思是在本地创建一个服务器用了展示我们生成的网页，这一步是非常方便的，以后我们有任何修改只需在本地查看，确保正确后再发布到github上。\n\n之后打开你电脑上的浏览器，输入http:\\\\localhost:4000访问，能显示就说明大功告成啦，安装完毕！！！\n\n### 将本地项目源文件上传到Github上","slug":"Hexo搭建博客小白教程","published":1,"updated":"2017-03-13T12:39:20.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj085wmuu0000wwayy5tkzo2e","content":"<h3 id=\"前言·\"><a href=\"#前言·\" class=\"headerlink\" title=\"前言·\"></a>前言·</h3><p>利用hexo在Github上搭建个人博客是我从我对象那里知道的，她学的前端，我学的Java，一直没了解过这个东西，前几天发现了，果断喜欢上了，以前都是在CSDN上写博客。<br>然后，我就开始了研究，到了现在，终于好了，网上教程确实很多啊，但是其间也有一些问题，然后昨天，我女朋友问了几个问题(女友还是小白啊，毕竟妹子)，在添加主题的地方。<br>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git clone http:.......git themes/icuals</div><div class=\"line\">cd themes/icuals</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>这样我们觉得很简单的，对于刚学的妹子来说确实是一个挑战啊！！对于Lunix命令基本不懂得啊.So，我就写了这篇博客给我女友看，是不是很有爱的啊。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>先放我看过的教程，都可以提供参考的。<br><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"external\">使用hexo，如果换了电脑怎么更新博客？</a><br><a href=\"https://jayzangwill.github.io/blog/2016/07/31/hexo-github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">hexo+github快速搭建个人博客</a></p>\n<h3 id=\"Github项目创建\"><a href=\"#Github项目创建\" class=\"headerlink\" title=\"Github项目创建\"></a>Github项目创建</h3><ul>\n<li><p>1.注册Github账号<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github官网</a></p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/github_sign_up.png\" alt=\"[注册账号]\" title=\"[注册账号]\">\n<p>点击上图的<strong> sign up </strong><br>然后就进入下图填写个人注册信息的界面，上面还有总步骤说明</p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/github_signup_info.png\" alt=\"[注册账号详情]\" title=\"[注册账号详情]\">\n<p>然后把三个步骤走完就OK啦！这时候你就拥有了你的Github账号和远程仓库。</p>\n</li>\n<li><p>2.创建项目<br>在你登录过的Github界面，右上方找到一个 <strong>+</strong> 号，然后点击，再选择new repository,就是新建项目啦。</p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161122214120.png\" alt=\"[创建项目引导]\" title=\"[创建项目引导]\">\n<p>然后就是新建项目界面，输入你要新建的项目名称，这里我们要建一个博客，所有名字要为你的Github账号加上<strong>.github.io</strong><br>比如我的Github账号为<strong>569258yin</strong>，那我创建的项目名称就为<strong>569258yin.github.io</strong>,下图可以看到我的项目名称已经存在了。</p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161122214451.png\" alt=\"[]\" title=\"[]\">\n<p>然后描述内容可以不写，或者写…（<em>对了，免费版的Github账号都是public的，也就是你的项目被人都可以看到，但是别人是没有权利修改的</em>）</p>\n</li>\n<li><p>3.创建分支</p>\n<pre><code>创建分支为了我们能够在不同的电脑上方便修改博客，首先，Github上master主分支存放\n的是hexo将我们的源文件转化生成的静态网页，是不存储我们实际操作的源文件的，我刚开\n始也不知道，然后去了公司，从Github上克隆了我的项目，准备做修改呢，结果全是静态网\n页，并不能直接修改，所有参考了知乎上大神给的方法。\n</code></pre><p>  <strong> 项目分为两个分支：master主分支用了存放静态网页，hexo(名字随意)分支用了存放项目源文件 </strong></p>\n</li>\n</ul>\n<p>当刚创好分支，如果你还没添加任何描述，项目界面是这样的<br><br>如果你的也是，就点图中红色标注的<strong>README</strong>，然后就可以添加一些描述啦。这里可以简单写一句话，关于如何使用README，可另行百度。<br>如果你的界面是下面的这种，那就可以直接点<strong>Branch:master</strong>,(<em>branch的意思就是分支,master代表主分支</em>)，在文本框中输入hexo（分支名）<br>然后点击create branch:hexo就可以了。<br><img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123080021.png\" alt=\"[]\" title=\"[]\"></p>\n<ul>\n<li>4.设置hexo分支为默认分支<br>点击项目设置,进到如下界面<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123205751.png\" alt=\"[]\" title=\"[]\">\n然后再选择Branch设置，可以看到当前默认分支为master，点击选择我们创建的hexo，然后点击右边update就可以了<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123205923.png\" alt=\"[]\" title=\"[]\">\n</li>\n</ul>\n<h3 id=\"本地搭建Hexo博客\"><a href=\"#本地搭建Hexo博客\" class=\"headerlink\" title=\"本地搭建Hexo博客\"></a>本地搭建Hexo博客</h3><ul>\n<li>1.在本地创建一个文件夹，比如我的取名为hexo，然后鼠标右键git branch，调出git控制台工具。如果你还没有装过这个软件，<br>那就需要先安装<a href=\"https://git-for-windows.github.io\" target=\"_blank\" rel=\"external\">软件下载地址</a>,不会安装的同学可以参考<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000\" target=\"_blank\" rel=\"external\">廖雪峰的Git安装教程及使用说明</a><br>打开控制台后输入</li>\n</ul>\n<p><code>git clone https://github.com/569258yin/test.github.io.git</code></p>\n<p>克隆你在Github创建的项目到本地，后面的网址是我的，你的项目网址在Github网站项目可以查看到，如下图：<br><img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123210805.png\" alt=\"[]\" title=\"[]\"><br>克隆完成后就会在hexo生成对应的项目文件夹<br><img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123210936.png\" alt=\"[]\" title=\"[]\"></p>\n<ul>\n<li>2.安装Node.js</li>\n</ul>\n<p>下载地址：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node官网</a>，下载任意版本，安装就可以了，这个很简单。安装完成可以在git bash控制台输入 <strong>node -v </strong> 如果能显示版本号就说明安装成功！</p>\n<ul>\n<li>3.安装hexo插件</li>\n</ul>\n<p>在git bash中利用node 自带的包管理器进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入 npm install -g hexo(或者npm i -g hexo)</div></pre></td></tr></table></figure>\n<ul>\n<li>4.初始化hexo</li>\n</ul>\n<p>首先需要将git bash 当前文件路径选到你的项目根目录下，不会命令的可以直接将当前的git bash关掉，然后直接鼠标点进去项目文件夹，鼠标右键选择 git bash 就可以了<br>然后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>这一步，我只能说超级慢的啊，视网络情况，反正我是等了很久…….</p>\n<ul>\n<li>5.测试是否安装完毕</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入  hexo generate(或 hexo g)</div></pre></td></tr></table></figure>\n<p>初始化本地文件，这时候hexo会把我们的源文件转化为静态网页，</p>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入  hexo server(或 hexo s)</div></pre></td></tr></table></figure>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123213034.png\" alt=\"[]\" title=\"[]\">\n<p>意思是在本地创建一个服务器用了展示我们生成的网页，这一步是非常方便的，以后我们有任何修改只需在本地查看，确保正确后再发布到github上。</p>\n<p>之后打开你电脑上的浏览器，输入http:\\localhost:4000访问，能显示就说明大功告成啦，安装完毕！！！</p>\n<h3 id=\"将本地项目源文件上传到Github上\"><a href=\"#将本地项目源文件上传到Github上\" class=\"headerlink\" title=\"将本地项目源文件上传到Github上\"></a>将本地项目源文件上传到Github上</h3>","excerpt":"","more":"<h3 id=\"前言·\"><a href=\"#前言·\" class=\"headerlink\" title=\"前言·\"></a>前言·</h3><p>利用hexo在Github上搭建个人博客是我从我对象那里知道的，她学的前端，我学的Java，一直没了解过这个东西，前几天发现了，果断喜欢上了，以前都是在CSDN上写博客。<br>然后，我就开始了研究，到了现在，终于好了，网上教程确实很多啊，但是其间也有一些问题，然后昨天，我女朋友问了几个问题(女友还是小白啊，毕竟妹子)，在添加主题的地方。<br>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git clone http:.......git themes/icuals</div><div class=\"line\">cd themes/icuals</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>这样我们觉得很简单的，对于刚学的妹子来说确实是一个挑战啊！！对于Lunix命令基本不懂得啊.So，我就写了这篇博客给我女友看，是不是很有爱的啊。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>先放我看过的教程，都可以提供参考的。<br><a href=\"https://www.zhihu.com/question/21193762\">使用hexo，如果换了电脑怎么更新博客？</a><br><a href=\"https://jayzangwill.github.io/blog/2016/07/31/hexo-github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more\">hexo+github快速搭建个人博客</a></p>\n<h3 id=\"Github项目创建\"><a href=\"#Github项目创建\" class=\"headerlink\" title=\"Github项目创建\"></a>Github项目创建</h3><ul>\n<li><p>1.注册Github账号<br><a href=\"https://github.com/\">Github官网</a></p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/github_sign_up.png\" alt=\"[注册账号]\" title=\"[注册账号]\">\n<p>点击上图的<strong> sign up </strong><br>然后就进入下图填写个人注册信息的界面，上面还有总步骤说明</p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/github_signup_info.png\" alt=\"[注册账号详情]\" title=\"[注册账号详情]\">\n<p>然后把三个步骤走完就OK啦！这时候你就拥有了你的Github账号和远程仓库。</p>\n</li>\n<li><p>2.创建项目<br>在你登录过的Github界面，右上方找到一个 <strong>+</strong> 号，然后点击，再选择new repository,就是新建项目啦。</p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161122214120.png\" alt=\"[创建项目引导]\" title=\"[创建项目引导]\">\n<p>然后就是新建项目界面，输入你要新建的项目名称，这里我们要建一个博客，所有名字要为你的Github账号加上<strong>.github.io</strong><br>比如我的Github账号为<strong>569258yin</strong>，那我创建的项目名称就为<strong>569258yin.github.io</strong>,下图可以看到我的项目名称已经存在了。</p>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161122214451.png\" alt=\"[]\" title=\"[]\">\n<p>然后描述内容可以不写，或者写…（<em>对了，免费版的Github账号都是public的，也就是你的项目被人都可以看到，但是别人是没有权利修改的</em>）</p>\n</li>\n<li><p>3.创建分支</p>\n<pre><code>创建分支为了我们能够在不同的电脑上方便修改博客，首先，Github上master主分支存放\n的是hexo将我们的源文件转化生成的静态网页，是不存储我们实际操作的源文件的，我刚开\n始也不知道，然后去了公司，从Github上克隆了我的项目，准备做修改呢，结果全是静态网\n页，并不能直接修改，所有参考了知乎上大神给的方法。\n</code></pre><p>  <strong> 项目分为两个分支：master主分支用了存放静态网页，hexo(名字随意)分支用了存放项目源文件 </strong></p>\n</li>\n</ul>\n<p>当刚创好分支，如果你还没添加任何描述，项目界面是这样的<br><br>如果你的也是，就点图中红色标注的<strong>README</strong>，然后就可以添加一些描述啦。这里可以简单写一句话，关于如何使用README，可另行百度。<br>如果你的界面是下面的这种，那就可以直接点<strong>Branch:master</strong>,(<em>branch的意思就是分支,master代表主分支</em>)，在文本框中输入hexo（分支名）<br>然后点击create branch:hexo就可以了。<br><img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123080021.png\" alt=\"[]\" title=\"[]\"></p>\n<ul>\n<li>4.设置hexo分支为默认分支<br>点击项目设置,进到如下界面<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123205751.png\" alt=\"[]\" title=\"[]\">\n然后再选择Branch设置，可以看到当前默认分支为master，点击选择我们创建的hexo，然后点击右边update就可以了<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123205923.png\" alt=\"[]\" title=\"[]\">\n</li>\n</ul>\n<h3 id=\"本地搭建Hexo博客\"><a href=\"#本地搭建Hexo博客\" class=\"headerlink\" title=\"本地搭建Hexo博客\"></a>本地搭建Hexo博客</h3><ul>\n<li>1.在本地创建一个文件夹，比如我的取名为hexo，然后鼠标右键git branch，调出git控制台工具。如果你还没有装过这个软件，<br>那就需要先安装<a href=\"https://git-for-windows.github.io\">软件下载地址</a>,不会安装的同学可以参考<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000\">廖雪峰的Git安装教程及使用说明</a><br>打开控制台后输入</li>\n</ul>\n<p><code>git clone https://github.com/569258yin/test.github.io.git</code></p>\n<p>克隆你在Github创建的项目到本地，后面的网址是我的，你的项目网址在Github网站项目可以查看到，如下图：<br><img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123210805.png\" alt=\"[]\" title=\"[]\"><br>克隆完成后就会在hexo生成对应的项目文件夹<br><img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123210936.png\" alt=\"[]\" title=\"[]\"></p>\n<ul>\n<li>2.安装Node.js</li>\n</ul>\n<p>下载地址：<a href=\"https://nodejs.org/en/\">Node官网</a>，下载任意版本，安装就可以了，这个很简单。安装完成可以在git bash控制台输入 <strong>node -v </strong> 如果能显示版本号就说明安装成功！</p>\n<ul>\n<li>3.安装hexo插件</li>\n</ul>\n<p>在git bash中利用node 自带的包管理器进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入 npm install -g hexo(或者npm i -g hexo)</div></pre></td></tr></table></figure>\n<ul>\n<li>4.初始化hexo</li>\n</ul>\n<p>首先需要将git bash 当前文件路径选到你的项目根目录下，不会命令的可以直接将当前的git bash关掉，然后直接鼠标点进去项目文件夹，鼠标右键选择 git bash 就可以了<br>然后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>这一步，我只能说超级慢的啊，视网络情况，反正我是等了很久…….</p>\n<ul>\n<li>5.测试是否安装完毕</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入  hexo generate(或 hexo g)</div></pre></td></tr></table></figure>\n<p>初始化本地文件，这时候hexo会把我们的源文件转化为静态网页，</p>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入  hexo server(或 hexo s)</div></pre></td></tr></table></figure>\n<img src=\"/2016/11/22/Hexo搭建博客小白教程/20161123213034.png\" alt=\"[]\" title=\"[]\">\n<p>意思是在本地创建一个服务器用了展示我们生成的网页，这一步是非常方便的，以后我们有任何修改只需在本地查看，确保正确后再发布到github上。</p>\n<p>之后打开你电脑上的浏览器，输入http:\\localhost:4000访问，能显示就说明大功告成啦，安装完毕！！！</p>\n<h3 id=\"将本地项目源文件上传到Github上\"><a href=\"#将本地项目源文件上传到Github上\" class=\"headerlink\" title=\"将本地项目源文件上传到Github上\"></a>将本地项目源文件上传到Github上</h3>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-13T12:39:20.548Z","updated":"2017-03-13T12:39:20.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj085wmuy0001wwaym0g7fw4h","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"javaweb与app实现文件上传","date":"2017-03-13T12:54:27.000Z","_content":"### 前言·\n最近在做毕设，然后app需要发送图文消息，就需要在app端实现图片上传，在web端实现文件接收，中间遇到点小意外，记在这里。\n\n### 1.开发所需第三方jar包\n    app端：HttpURLConnection(jdk自带)\n    web端: commons-fileupload\n    maven路径：\n```\n    <dependency>\n\t\t\t<groupId>commons-fileupload</groupId>\n\t\t\t<artifactId>commons-fileupload</artifactId>\n\t\t\t<version>1.3.2</version>\n    </dependency>\n    \n```\n\n### 2.JavaWeb端代码\n    服务器端主要是为了接收客户端的请求，从请求解析出文件，可支持多文件上传，并创建了文件夹和随机名字，以保证生成的文件路径唯一，这里路径有两个，一个是保存的本地真实路径，用于\n    写文件，第二个是为了生成url，便于客户端访问，并以json的方式进行返回。\n#### Controller代码\n```\n\n    import java.io.File;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n    import java.io.InputStream;\n    import java.io.OutputStream;\n    import java.io.UnsupportedEncodingException;\n    import java.util.ArrayList;\n    import java.util.List;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    import org.apache.commons.fileupload.FileItem;\n    import org.apache.commons.fileupload.FileUploadException;\n    import org.apache.commons.fileupload.ProgressListener;\n    import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n    import org.apache.commons.fileupload.servlet.ServletFileUpload;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import com.aygxy.fmaket.bean.ImagePath;\n    import com.aygxy.fmaket.debug.DebugLog;\n    import com.aygxy.fmaket.param.GlobalParams;\n    import com.aygxy.fmaket.util.FileUtil;\n    import com.aygxy.fmaket.util.GsonUtil;\n\n    @Controller\n    @RequestMapping(\"file\")\n    public class FileAction {\n\n        private final static String ENCODING = \"utf-8\";\n\n        static{\n\n        }\n\n        @RequestMapping(\"imgUpload.action\")\n        public void imageUpload(HttpServletRequest request,HttpServletResponse response){\n            //创建工厂\n            DiskFileItemFactory factory = new DiskFileItemFactory();\n            //设置缓冲区的大小\n            factory.setSizeThreshold(1024*1024*5);\n            String result = \"\";\n            //本地服务器真实路径\n            String imgPath = request.getSession().getServletContext().getRealPath(File.separator+\"extimg\");\n            //上传时生成的临时文件保存目录\n            String tempPath = request.getSession().getServletContext().getRealPath(File.separator+\"temp\");\n            //设置上传文件临时文件的保存路径\n            File tmpFile = new File(tempPath);\n            if (!tmpFile.exists()) {\n                //创建临时目录\n                tmpFile.mkdir();\n            }\n            factory.setRepository(tmpFile);\n            InputStream is = null;\n            OutputStream os = null;\n            try {\n                //创建一个文件上传解析器\n                ServletFileUpload upload = new ServletFileUpload(factory);\n                upload.setProgressListener(new ProgressListener() {\n                    @Override\n                    public void update(long pBytesRead, long pContentLength, int arg2) {\n                        DebugLog.logger.info(\"文件大小为：\" + pContentLength + \",当前已处理：\" + pBytesRead);\n                    }\n                });\n                //设置编码格式 \n                upload.setHeaderEncoding(ENCODING);\n                //判断是否是表单提交\n                if(!ServletFileUpload.isMultipartContent(request)){\n                    DebugLog.logger.info(\"不正确的文件格式\");\n                    result = GsonUtil.objectToString(new ImagePath(\"-1\", \"不正确的文件格式\"));\n                    response.getOutputStream().write(result.getBytes(ENCODING));\n                    return;\n                }\n                //设置图片最大限制\n                upload.setFileSizeMax(1024*1024);\n                //使用解析器对上传的文件进行解析\n                List<FileItem> list = upload.parseRequest(request);\n                DebugLog.logger.debug(\"解析出的文件列表为\"+list.toString());\n                if(list.size() > 0 ){\n                    List<String> imageLists = new ArrayList<String>();\n                    for (FileItem fileItem : list) {\n                        //如果封装的是普通的数据\n                        if (fileItem.isFormField() && fileItem.getSize() > 0) {\n                            String requestName = fileItem.getFieldName();\n                            //解决普通输入项的中文乱码问题\n                            String requestValue = fileItem.getString(ENCODING);\n                            DebugLog.logger.info(\"文件上传携带参数==>\"+requestName+\":\"+requestValue);\n                        }else{\t//封装的是上传的文件\n                            //得到上传的文件名\n                            String fileName = fileItem.getName();\n                            DebugLog.logger.debug(\"上传文件的文件名：\"+fileName);\n                            if (fileName == null || fileName.trim().equals(\"\")) {\n                                continue;\n                            }\n                            //注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，\n                            //如：  c:\\a\\b\\1.txt，而有些只是单纯的文件名，如：1.txt\n                            //处理获取到的上传文件的文件名的路径部分，只保留文件名\n                            fileName = fileName.substring(fileName.lastIndexOf(\"\\\\\")+1);\n                            //得到上传文件的扩展名\n                            String fileExtName = fileName.substring(fileName.lastIndexOf(\".\")+1);\n                            DebugLog.logger.debug(\"上传的文件的扩展名是：\"+fileExtName);\n                            boolean allowCount = false;\n                            for(int i = 0;i<GlobalParams.IMAGE_ALLOW_END.length;i++){\n                                if(GlobalParams.IMAGE_ALLOW_END[i].equals(fileExtName)){\n                                    allowCount = true;\n                                    break;\n                                }\n                            }\n                            if(!allowCount){\n                                DebugLog.logger.info(\"文件后缀不正确\");\n                                result = GsonUtil.objectToString(new ImagePath(\"-2\", \"文件格式不正确\"));\n                                response.getOutputStream().write(result.getBytes(ENCODING));\n                                return;\n                            }\n                            //获取item上传的输入流\n                            //获取唯一名，随机生成\n                            String saveFileName= FileUtil.makeFileName(fileExtName);\n                            //根据文件名记性hash生成文件夹\n                            String filePath = FileUtil.makePath(saveFileName, \"\");\n                            String realFilePath = imgPath + filePath;\n                            //用于url生成\n                            String otherFilePath = request.getContextPath() + File.separator + \"extimg\" + filePath;\n                            //创建文件夹\n                            File filePathFile = new File(realFilePath);\n                            if (!filePathFile.exists()) {\n                                filePathFile.mkdirs();\n                            }\n                            //创建文件\n                            File file = new File(filePathFile,saveFileName);\n                            if (!file.exists()) {\n                                file.createNewFile();\n                            }\n                            DebugLog.logger.debug(\"本地创建的文件路径：\"+file.getAbsolutePath());\n                            is = fileItem.getInputStream();\n                            os = new FileOutputStream(file);\n                            //创建一个缓冲区\n                            byte[] buff = new byte[2048];\n                            int len = 0;\n                            while((len = is.read(buff)) != -1){\n                                os.write(buff, 0, len);\n                            }\n                            //删除处理文件的临时文件\n                            fileItem.delete();\n                            otherFilePath = GlobalParams.SERVER_URL + otherFilePath + File.separator + saveFileName;\n                            otherFilePath =  otherFilePath.replace('\\\\', '/');\n                            DebugLog.logger.debug(\"生成的图片url为:\"+otherFilePath);\n                            imageLists.add(otherFilePath);\n                        }\n                    }\n                    result = GsonUtil.objectToString(new ImagePath(imageLists));\n                    response.getOutputStream().write(result.getBytes(ENCODING));\n                }\n            } catch (FileUploadException e) {\n                DebugLog.logger.error(\"文件上传失败\", e);\n            } catch (UnsupportedEncodingException e) {\n                DebugLog.logger.error(\"不支持的编码格式\", e);\n            } catch (IOException e) {\n                DebugLog.logger.error(\"文件读写失败\", e);\n            } catch (Exception e) {\n                DebugLog.logger.error(\"文件上传未知异常\", e);\n            }finally{\n                //关闭流\n                if(is != null){\n                    try {\n                        is.close();\n                    } catch (Exception e) {\n                    }\n                }\n                if(os != null){\n                    try {\n                        os.close();\n                    } catch (Exception e) {\n                    }\n                }\n            }\n        }\n    }\n    \n```\n#### FileUtil 代码\n\n```\n\n    public class FileUtil {\n        /**\n         * 根据文件后缀生成一个随机的文件名\n         * @param fileExtName\n         * @return\n         */\n        public static String makeFileName(String fileExtName){  \n            //为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名\n            return UUID.randomUUID().toString() + \".\" + fileExtName;\n        }\n\n        /**\n         * 为防止一个目录下面出现太多文件，要使用hash算法打散存储\n         *\n         * @param filename 文件名，要根据文件名生成存储目录\n         * @param savePath 文件存储路径\n         * @return 新的存储目录\n         */ \n        public static String makePath(String filename,String savePath){\n            //得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址\n            int hashcode = filename.hashCode();\n            int dir1 = hashcode&0xf;  //0--15\n            int dir2 = (hashcode&0xf0)>>4;  //0-15\n            int dir3 = (int) (100000 + Math.random()*999999);\n            //构造新的保存目录\n            String dir = savePath + File.separator + dir1 + File.separator + dir2 + File.separator + dir3;  //upload\\2\\3  upload\\3\\5\n    //\t\t//File既可以代表文件也可以代表目录\n    //\t\tFile file = new File(dir);\n    //\t\t//如果目录不存在\n    //\t\tif(!file.exists()){\n    //\t\t\t//创建目录\n    //\t\t\tfile.mkdirs();\n    //\t\t}\n            return dir;\n        }\n\n        /**\n         * 得到要删除图片的真实路径\n         * @param request\n         * @param tempPath\n         * @return\n         */\n        public static String getLocalImageUrl(String tempPath){\n            String url = \"\";\n            String[] strs = tempPath.split(\"/\");\n            for (int i = 0; i < strs.length; i++) {\n                System.out.println(strs[i]);\n            }\n    //\t\turl = GlobalParams.path+File.separator+strs[5]+File.separator+strs[6];\n            System.out.println(url);\t\t\n            return url;\n        }\n\n\n        public static void main(String[] args) {\n            System.out.println(makePath(\"1.jpg\", \"Path\"));\n        }\n    }\n    \n```\n\n### app端\n    \n    app 端利用httpConnection，并设置请求方式为post，将context-type改为multipart/form-data,一定要注意分割符的位置，我是因为这导致两种上传不成功，一是服务器端明明能接收\n    到文件，但是就是从request解析的时候为空，二是批量上传的时候发现只能上传成功一张，服务器并没有解析出多个文件。\n    \n```\n\n        /**\n         * 上传图片\n         * @param files\n         * @return\n         */\n        public static String uploadImage(List<File> files) {\n            URL url;\n            DataOutputStream ds = null;\n            BufferedReader bufferedReader = null;\n            //为了分割\n            String end = \"\\r\\n\";\n            String Hyphens = \"--\";\n            String boundary = \"WUm4580jbtwfJhNp7zi1djFEO3wNNm\";\n            try {\n                if (files != null && files.size() > 0) {\n                    url = new URL(ConstantValue.URL_ROOT + ConstantValue.IMAGE_UPLOAD);\n                    // 打开链接\n                    URLConnection connection = url.openConnection();\n                    HttpURLConnection httpURLConnection = (HttpURLConnection) connection;\n                    httpURLConnection.setRequestMethod(\"POST\");\n                    httpURLConnection.setReadTimeout(30000);\n                    httpURLConnection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n                    httpURLConnection.setRequestProperty(\"Content-type\", \"multipart/form-data;boundary=\" + boundary);\n                    httpURLConnection.setRequestProperty(\"charset\", \"utf-8\");\n                    httpURLConnection.setUseCaches(false);\n                    httpURLConnection.setDoInput(true);\n                    httpURLConnection.setDoOutput(true);\n                    ds = new DataOutputStream(httpURLConnection.getOutputStream());\n                    for (int i = 0;i<files.size();i++) {\n                        File file = files.get(i);\n                        //注意加上分隔符此时只有一个Hyphens\n                        ds.writeBytes(Hyphens + boundary + end);\n                        //这里的格式不能改变，我将name换了别的名字结果服务器端不能正常接收文件\n                        ds.writeBytes(\"Content-Disposition: form-data; \"\n                                + \"name=\\\"file\"+i+\"\\\";filename=\\\"\" + file.getName() + \"\\\"\" + end);\n                        ds.writeBytes(end);\n                        FileInputStream fStream = new FileInputStream(file);\n                        byte[] buff = new byte[1024];\n                        int length = -1;\n                        while((length = fStream.read(buff)) != -1){\n                            ds.write(buff,0,length);\n                        }\n                        ds.writeBytes(end);\n                        fStream.close();\n                    }\n                    //结尾分隔符，注意此处为Hyphens + boundary + Hyphens+ end,有两个Hyphens，我刚开始没注意，结果就是不能批量上传文件\n                    ds.writeBytes(Hyphens + boundary + Hyphens+ end);\n                    ds.flush();\n                    bufferedReader = new BufferedReader(\n                            new InputStreamReader(httpURLConnection.getInputStream(),\"UTF-8\"));\n                    String jsonString2 = bufferedReader.readLine();\n                    Logger.d(jsonString2);\n                    return jsonString2;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }finally {\n                if(ds != null){\n                    try {\n                        ds.close();\n                    } catch (Exception e) {\n                    }\n                }\n                if(bufferedReader != null){\n                    try {\n                        bufferedReader.close();\n                    } catch (Exception e) {\n                    }\n                }\n            }\n            return null;\n        }\n\n```\n### 结尾\n有时候觉得自己还是不够认真，在网上搜了这方面的经验和代码，结果自己实现的时候会因为一些稍微不一样的地方导致各种不成功，就很无奈，后来就慢慢排查，细心一点就可以找到问题的关键了，\n暂时只写了一种客户端的实现上传的办法，还有一种是利用httpClient进行上传文件，代码稍有不同，之后再补上。关于分隔符的问题还没搞懂，没有去研究其实现原理，可能也存在误解，但这份代码时测试的没有问题的。\n\n\n","source":"_posts/javaweb与app实现文件上传.md","raw":"---\ntitle: javaweb与app实现文件上传\ndate: 2017-03-13 20:54:27\ncategories: Java\ntags: \n    --Java\n    --app\n---\n### 前言·\n最近在做毕设，然后app需要发送图文消息，就需要在app端实现图片上传，在web端实现文件接收，中间遇到点小意外，记在这里。\n\n### 1.开发所需第三方jar包\n    app端：HttpURLConnection(jdk自带)\n    web端: commons-fileupload\n    maven路径：\n```\n    <dependency>\n\t\t\t<groupId>commons-fileupload</groupId>\n\t\t\t<artifactId>commons-fileupload</artifactId>\n\t\t\t<version>1.3.2</version>\n    </dependency>\n    \n```\n\n### 2.JavaWeb端代码\n    服务器端主要是为了接收客户端的请求，从请求解析出文件，可支持多文件上传，并创建了文件夹和随机名字，以保证生成的文件路径唯一，这里路径有两个，一个是保存的本地真实路径，用于\n    写文件，第二个是为了生成url，便于客户端访问，并以json的方式进行返回。\n#### Controller代码\n```\n\n    import java.io.File;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n    import java.io.InputStream;\n    import java.io.OutputStream;\n    import java.io.UnsupportedEncodingException;\n    import java.util.ArrayList;\n    import java.util.List;\n    import javax.servlet.http.HttpServletRequest;\n    import javax.servlet.http.HttpServletResponse;\n    import org.apache.commons.fileupload.FileItem;\n    import org.apache.commons.fileupload.FileUploadException;\n    import org.apache.commons.fileupload.ProgressListener;\n    import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n    import org.apache.commons.fileupload.servlet.ServletFileUpload;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import com.aygxy.fmaket.bean.ImagePath;\n    import com.aygxy.fmaket.debug.DebugLog;\n    import com.aygxy.fmaket.param.GlobalParams;\n    import com.aygxy.fmaket.util.FileUtil;\n    import com.aygxy.fmaket.util.GsonUtil;\n\n    @Controller\n    @RequestMapping(\"file\")\n    public class FileAction {\n\n        private final static String ENCODING = \"utf-8\";\n\n        static{\n\n        }\n\n        @RequestMapping(\"imgUpload.action\")\n        public void imageUpload(HttpServletRequest request,HttpServletResponse response){\n            //创建工厂\n            DiskFileItemFactory factory = new DiskFileItemFactory();\n            //设置缓冲区的大小\n            factory.setSizeThreshold(1024*1024*5);\n            String result = \"\";\n            //本地服务器真实路径\n            String imgPath = request.getSession().getServletContext().getRealPath(File.separator+\"extimg\");\n            //上传时生成的临时文件保存目录\n            String tempPath = request.getSession().getServletContext().getRealPath(File.separator+\"temp\");\n            //设置上传文件临时文件的保存路径\n            File tmpFile = new File(tempPath);\n            if (!tmpFile.exists()) {\n                //创建临时目录\n                tmpFile.mkdir();\n            }\n            factory.setRepository(tmpFile);\n            InputStream is = null;\n            OutputStream os = null;\n            try {\n                //创建一个文件上传解析器\n                ServletFileUpload upload = new ServletFileUpload(factory);\n                upload.setProgressListener(new ProgressListener() {\n                    @Override\n                    public void update(long pBytesRead, long pContentLength, int arg2) {\n                        DebugLog.logger.info(\"文件大小为：\" + pContentLength + \",当前已处理：\" + pBytesRead);\n                    }\n                });\n                //设置编码格式 \n                upload.setHeaderEncoding(ENCODING);\n                //判断是否是表单提交\n                if(!ServletFileUpload.isMultipartContent(request)){\n                    DebugLog.logger.info(\"不正确的文件格式\");\n                    result = GsonUtil.objectToString(new ImagePath(\"-1\", \"不正确的文件格式\"));\n                    response.getOutputStream().write(result.getBytes(ENCODING));\n                    return;\n                }\n                //设置图片最大限制\n                upload.setFileSizeMax(1024*1024);\n                //使用解析器对上传的文件进行解析\n                List<FileItem> list = upload.parseRequest(request);\n                DebugLog.logger.debug(\"解析出的文件列表为\"+list.toString());\n                if(list.size() > 0 ){\n                    List<String> imageLists = new ArrayList<String>();\n                    for (FileItem fileItem : list) {\n                        //如果封装的是普通的数据\n                        if (fileItem.isFormField() && fileItem.getSize() > 0) {\n                            String requestName = fileItem.getFieldName();\n                            //解决普通输入项的中文乱码问题\n                            String requestValue = fileItem.getString(ENCODING);\n                            DebugLog.logger.info(\"文件上传携带参数==>\"+requestName+\":\"+requestValue);\n                        }else{\t//封装的是上传的文件\n                            //得到上传的文件名\n                            String fileName = fileItem.getName();\n                            DebugLog.logger.debug(\"上传文件的文件名：\"+fileName);\n                            if (fileName == null || fileName.trim().equals(\"\")) {\n                                continue;\n                            }\n                            //注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，\n                            //如：  c:\\a\\b\\1.txt，而有些只是单纯的文件名，如：1.txt\n                            //处理获取到的上传文件的文件名的路径部分，只保留文件名\n                            fileName = fileName.substring(fileName.lastIndexOf(\"\\\\\")+1);\n                            //得到上传文件的扩展名\n                            String fileExtName = fileName.substring(fileName.lastIndexOf(\".\")+1);\n                            DebugLog.logger.debug(\"上传的文件的扩展名是：\"+fileExtName);\n                            boolean allowCount = false;\n                            for(int i = 0;i<GlobalParams.IMAGE_ALLOW_END.length;i++){\n                                if(GlobalParams.IMAGE_ALLOW_END[i].equals(fileExtName)){\n                                    allowCount = true;\n                                    break;\n                                }\n                            }\n                            if(!allowCount){\n                                DebugLog.logger.info(\"文件后缀不正确\");\n                                result = GsonUtil.objectToString(new ImagePath(\"-2\", \"文件格式不正确\"));\n                                response.getOutputStream().write(result.getBytes(ENCODING));\n                                return;\n                            }\n                            //获取item上传的输入流\n                            //获取唯一名，随机生成\n                            String saveFileName= FileUtil.makeFileName(fileExtName);\n                            //根据文件名记性hash生成文件夹\n                            String filePath = FileUtil.makePath(saveFileName, \"\");\n                            String realFilePath = imgPath + filePath;\n                            //用于url生成\n                            String otherFilePath = request.getContextPath() + File.separator + \"extimg\" + filePath;\n                            //创建文件夹\n                            File filePathFile = new File(realFilePath);\n                            if (!filePathFile.exists()) {\n                                filePathFile.mkdirs();\n                            }\n                            //创建文件\n                            File file = new File(filePathFile,saveFileName);\n                            if (!file.exists()) {\n                                file.createNewFile();\n                            }\n                            DebugLog.logger.debug(\"本地创建的文件路径：\"+file.getAbsolutePath());\n                            is = fileItem.getInputStream();\n                            os = new FileOutputStream(file);\n                            //创建一个缓冲区\n                            byte[] buff = new byte[2048];\n                            int len = 0;\n                            while((len = is.read(buff)) != -1){\n                                os.write(buff, 0, len);\n                            }\n                            //删除处理文件的临时文件\n                            fileItem.delete();\n                            otherFilePath = GlobalParams.SERVER_URL + otherFilePath + File.separator + saveFileName;\n                            otherFilePath =  otherFilePath.replace('\\\\', '/');\n                            DebugLog.logger.debug(\"生成的图片url为:\"+otherFilePath);\n                            imageLists.add(otherFilePath);\n                        }\n                    }\n                    result = GsonUtil.objectToString(new ImagePath(imageLists));\n                    response.getOutputStream().write(result.getBytes(ENCODING));\n                }\n            } catch (FileUploadException e) {\n                DebugLog.logger.error(\"文件上传失败\", e);\n            } catch (UnsupportedEncodingException e) {\n                DebugLog.logger.error(\"不支持的编码格式\", e);\n            } catch (IOException e) {\n                DebugLog.logger.error(\"文件读写失败\", e);\n            } catch (Exception e) {\n                DebugLog.logger.error(\"文件上传未知异常\", e);\n            }finally{\n                //关闭流\n                if(is != null){\n                    try {\n                        is.close();\n                    } catch (Exception e) {\n                    }\n                }\n                if(os != null){\n                    try {\n                        os.close();\n                    } catch (Exception e) {\n                    }\n                }\n            }\n        }\n    }\n    \n```\n#### FileUtil 代码\n\n```\n\n    public class FileUtil {\n        /**\n         * 根据文件后缀生成一个随机的文件名\n         * @param fileExtName\n         * @return\n         */\n        public static String makeFileName(String fileExtName){  \n            //为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名\n            return UUID.randomUUID().toString() + \".\" + fileExtName;\n        }\n\n        /**\n         * 为防止一个目录下面出现太多文件，要使用hash算法打散存储\n         *\n         * @param filename 文件名，要根据文件名生成存储目录\n         * @param savePath 文件存储路径\n         * @return 新的存储目录\n         */ \n        public static String makePath(String filename,String savePath){\n            //得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址\n            int hashcode = filename.hashCode();\n            int dir1 = hashcode&0xf;  //0--15\n            int dir2 = (hashcode&0xf0)>>4;  //0-15\n            int dir3 = (int) (100000 + Math.random()*999999);\n            //构造新的保存目录\n            String dir = savePath + File.separator + dir1 + File.separator + dir2 + File.separator + dir3;  //upload\\2\\3  upload\\3\\5\n    //\t\t//File既可以代表文件也可以代表目录\n    //\t\tFile file = new File(dir);\n    //\t\t//如果目录不存在\n    //\t\tif(!file.exists()){\n    //\t\t\t//创建目录\n    //\t\t\tfile.mkdirs();\n    //\t\t}\n            return dir;\n        }\n\n        /**\n         * 得到要删除图片的真实路径\n         * @param request\n         * @param tempPath\n         * @return\n         */\n        public static String getLocalImageUrl(String tempPath){\n            String url = \"\";\n            String[] strs = tempPath.split(\"/\");\n            for (int i = 0; i < strs.length; i++) {\n                System.out.println(strs[i]);\n            }\n    //\t\turl = GlobalParams.path+File.separator+strs[5]+File.separator+strs[6];\n            System.out.println(url);\t\t\n            return url;\n        }\n\n\n        public static void main(String[] args) {\n            System.out.println(makePath(\"1.jpg\", \"Path\"));\n        }\n    }\n    \n```\n\n### app端\n    \n    app 端利用httpConnection，并设置请求方式为post，将context-type改为multipart/form-data,一定要注意分割符的位置，我是因为这导致两种上传不成功，一是服务器端明明能接收\n    到文件，但是就是从request解析的时候为空，二是批量上传的时候发现只能上传成功一张，服务器并没有解析出多个文件。\n    \n```\n\n        /**\n         * 上传图片\n         * @param files\n         * @return\n         */\n        public static String uploadImage(List<File> files) {\n            URL url;\n            DataOutputStream ds = null;\n            BufferedReader bufferedReader = null;\n            //为了分割\n            String end = \"\\r\\n\";\n            String Hyphens = \"--\";\n            String boundary = \"WUm4580jbtwfJhNp7zi1djFEO3wNNm\";\n            try {\n                if (files != null && files.size() > 0) {\n                    url = new URL(ConstantValue.URL_ROOT + ConstantValue.IMAGE_UPLOAD);\n                    // 打开链接\n                    URLConnection connection = url.openConnection();\n                    HttpURLConnection httpURLConnection = (HttpURLConnection) connection;\n                    httpURLConnection.setRequestMethod(\"POST\");\n                    httpURLConnection.setReadTimeout(30000);\n                    httpURLConnection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n                    httpURLConnection.setRequestProperty(\"Content-type\", \"multipart/form-data;boundary=\" + boundary);\n                    httpURLConnection.setRequestProperty(\"charset\", \"utf-8\");\n                    httpURLConnection.setUseCaches(false);\n                    httpURLConnection.setDoInput(true);\n                    httpURLConnection.setDoOutput(true);\n                    ds = new DataOutputStream(httpURLConnection.getOutputStream());\n                    for (int i = 0;i<files.size();i++) {\n                        File file = files.get(i);\n                        //注意加上分隔符此时只有一个Hyphens\n                        ds.writeBytes(Hyphens + boundary + end);\n                        //这里的格式不能改变，我将name换了别的名字结果服务器端不能正常接收文件\n                        ds.writeBytes(\"Content-Disposition: form-data; \"\n                                + \"name=\\\"file\"+i+\"\\\";filename=\\\"\" + file.getName() + \"\\\"\" + end);\n                        ds.writeBytes(end);\n                        FileInputStream fStream = new FileInputStream(file);\n                        byte[] buff = new byte[1024];\n                        int length = -1;\n                        while((length = fStream.read(buff)) != -1){\n                            ds.write(buff,0,length);\n                        }\n                        ds.writeBytes(end);\n                        fStream.close();\n                    }\n                    //结尾分隔符，注意此处为Hyphens + boundary + Hyphens+ end,有两个Hyphens，我刚开始没注意，结果就是不能批量上传文件\n                    ds.writeBytes(Hyphens + boundary + Hyphens+ end);\n                    ds.flush();\n                    bufferedReader = new BufferedReader(\n                            new InputStreamReader(httpURLConnection.getInputStream(),\"UTF-8\"));\n                    String jsonString2 = bufferedReader.readLine();\n                    Logger.d(jsonString2);\n                    return jsonString2;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }finally {\n                if(ds != null){\n                    try {\n                        ds.close();\n                    } catch (Exception e) {\n                    }\n                }\n                if(bufferedReader != null){\n                    try {\n                        bufferedReader.close();\n                    } catch (Exception e) {\n                    }\n                }\n            }\n            return null;\n        }\n\n```\n### 结尾\n有时候觉得自己还是不够认真，在网上搜了这方面的经验和代码，结果自己实现的时候会因为一些稍微不一样的地方导致各种不成功，就很无奈，后来就慢慢排查，细心一点就可以找到问题的关键了，\n暂时只写了一种客户端的实现上传的办法，还有一种是利用httpClient进行上传文件，代码稍有不同，之后再补上。关于分隔符的问题还没搞懂，没有去研究其实现原理，可能也存在误解，但这份代码时测试的没有问题的。\n\n\n","slug":"javaweb与app实现文件上传","published":1,"updated":"2017-03-13T13:37:20.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj085wmv40004wwayf6dybqbn","content":"<h3 id=\"前言·\"><a href=\"#前言·\" class=\"headerlink\" title=\"前言·\"></a>前言·</h3><p>最近在做毕设，然后app需要发送图文消息，就需要在app端实现图片上传，在web端实现文件接收，中间遇到点小意外，记在这里。</p>\n<h3 id=\"1-开发所需第三方jar包\"><a href=\"#1-开发所需第三方jar包\" class=\"headerlink\" title=\"1.开发所需第三方jar包\"></a>1.开发所需第三方jar包</h3><pre><code>app端：HttpURLConnection(jdk自带)\nweb端: commons-fileupload\nmaven路径：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;dependency&gt;</div><div class=\"line\">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</div><div class=\"line\">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</div><div class=\"line\">&lt;version&gt;1.3.2&lt;/version&gt;</div><div class=\"line\"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-JavaWeb端代码\"><a href=\"#2-JavaWeb端代码\" class=\"headerlink\" title=\"2.JavaWeb端代码\"></a>2.JavaWeb端代码</h3><pre><code>服务器端主要是为了接收客户端的请求，从请求解析出文件，可支持多文件上传，并创建了文件夹和随机名字，以保证生成的文件路径唯一，这里路径有两个，一个是保存的本地真实路径，用于\n写文件，第二个是为了生成url，便于客户端访问，并以json的方式进行返回。\n</code></pre><h4 id=\"Controller代码\"><a href=\"#Controller代码\" class=\"headerlink\" title=\"Controller代码\"></a>Controller代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStream;</div><div class=\"line\">import java.io.OutputStream;</div><div class=\"line\">import java.io.UnsupportedEncodingException;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\">import javax.servlet.http.HttpServletRequest;</div><div class=\"line\">import javax.servlet.http.HttpServletResponse;</div><div class=\"line\">import org.apache.commons.fileupload.FileItem;</div><div class=\"line\">import org.apache.commons.fileupload.FileUploadException;</div><div class=\"line\">import org.apache.commons.fileupload.ProgressListener;</div><div class=\"line\">import org.apache.commons.fileupload.disk.DiskFileItemFactory;</div><div class=\"line\">import org.apache.commons.fileupload.servlet.ServletFileUpload;</div><div class=\"line\">import org.springframework.stereotype.Controller;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</div><div class=\"line\">import com.aygxy.fmaket.bean.ImagePath;</div><div class=\"line\">import com.aygxy.fmaket.debug.DebugLog;</div><div class=\"line\">import com.aygxy.fmaket.param.GlobalParams;</div><div class=\"line\">import com.aygxy.fmaket.util.FileUtil;</div><div class=\"line\">import com.aygxy.fmaket.util.GsonUtil;</div><div class=\"line\"></div><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(&quot;file&quot;)</div><div class=\"line\">public class FileAction &#123;</div><div class=\"line\"></div><div class=\"line\">    private final static String ENCODING = &quot;utf-8&quot;;</div><div class=\"line\"></div><div class=\"line\">    static&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(&quot;imgUpload.action&quot;)</div><div class=\"line\">    public void imageUpload(HttpServletRequest request,HttpServletResponse response)&#123;</div><div class=\"line\">        //创建工厂</div><div class=\"line\">        DiskFileItemFactory factory = new DiskFileItemFactory();</div><div class=\"line\">        //设置缓冲区的大小</div><div class=\"line\">        factory.setSizeThreshold(1024*1024*5);</div><div class=\"line\">        String result = &quot;&quot;;</div><div class=\"line\">        //本地服务器真实路径</div><div class=\"line\">        String imgPath = request.getSession().getServletContext().getRealPath(File.separator+&quot;extimg&quot;);</div><div class=\"line\">        //上传时生成的临时文件保存目录</div><div class=\"line\">        String tempPath = request.getSession().getServletContext().getRealPath(File.separator+&quot;temp&quot;);</div><div class=\"line\">        //设置上传文件临时文件的保存路径</div><div class=\"line\">        File tmpFile = new File(tempPath);</div><div class=\"line\">        if (!tmpFile.exists()) &#123;</div><div class=\"line\">            //创建临时目录</div><div class=\"line\">            tmpFile.mkdir();</div><div class=\"line\">        &#125;</div><div class=\"line\">        factory.setRepository(tmpFile);</div><div class=\"line\">        InputStream is = null;</div><div class=\"line\">        OutputStream os = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //创建一个文件上传解析器</div><div class=\"line\">            ServletFileUpload upload = new ServletFileUpload(factory);</div><div class=\"line\">            upload.setProgressListener(new ProgressListener() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void update(long pBytesRead, long pContentLength, int arg2) &#123;</div><div class=\"line\">                    DebugLog.logger.info(&quot;文件大小为：&quot; + pContentLength + &quot;,当前已处理：&quot; + pBytesRead);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            //设置编码格式 </div><div class=\"line\">            upload.setHeaderEncoding(ENCODING);</div><div class=\"line\">            //判断是否是表单提交</div><div class=\"line\">            if(!ServletFileUpload.isMultipartContent(request))&#123;</div><div class=\"line\">                DebugLog.logger.info(&quot;不正确的文件格式&quot;);</div><div class=\"line\">                result = GsonUtil.objectToString(new ImagePath(&quot;-1&quot;, &quot;不正确的文件格式&quot;));</div><div class=\"line\">                response.getOutputStream().write(result.getBytes(ENCODING));</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //设置图片最大限制</div><div class=\"line\">            upload.setFileSizeMax(1024*1024);</div><div class=\"line\">            //使用解析器对上传的文件进行解析</div><div class=\"line\">            List&lt;FileItem&gt; list = upload.parseRequest(request);</div><div class=\"line\">            DebugLog.logger.debug(&quot;解析出的文件列表为&quot;+list.toString());</div><div class=\"line\">            if(list.size() &gt; 0 )&#123;</div><div class=\"line\">                List&lt;String&gt; imageLists = new ArrayList&lt;String&gt;();</div><div class=\"line\">                for (FileItem fileItem : list) &#123;</div><div class=\"line\">                    //如果封装的是普通的数据</div><div class=\"line\">                    if (fileItem.isFormField() &amp;&amp; fileItem.getSize() &gt; 0) &#123;</div><div class=\"line\">                        String requestName = fileItem.getFieldName();</div><div class=\"line\">                        //解决普通输入项的中文乱码问题</div><div class=\"line\">                        String requestValue = fileItem.getString(ENCODING);</div><div class=\"line\">                        DebugLog.logger.info(&quot;文件上传携带参数==&gt;&quot;+requestName+&quot;:&quot;+requestValue);</div><div class=\"line\">                    &#125;else&#123;\t//封装的是上传的文件</div><div class=\"line\">                        //得到上传的文件名</div><div class=\"line\">                        String fileName = fileItem.getName();</div><div class=\"line\">                        DebugLog.logger.debug(&quot;上传文件的文件名：&quot;+fileName);</div><div class=\"line\">                        if (fileName == null || fileName.trim().equals(&quot;&quot;)) &#123;</div><div class=\"line\">                            continue;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，</div><div class=\"line\">                        //如：  c:\\a\\b\\1.txt，而有些只是单纯的文件名，如：1.txt</div><div class=\"line\">                        //处理获取到的上传文件的文件名的路径部分，只保留文件名</div><div class=\"line\">                        fileName = fileName.substring(fileName.lastIndexOf(&quot;\\\\&quot;)+1);</div><div class=\"line\">                        //得到上传文件的扩展名</div><div class=\"line\">                        String fileExtName = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1);</div><div class=\"line\">                        DebugLog.logger.debug(&quot;上传的文件的扩展名是：&quot;+fileExtName);</div><div class=\"line\">                        boolean allowCount = false;</div><div class=\"line\">                        for(int i = 0;i&lt;GlobalParams.IMAGE_ALLOW_END.length;i++)&#123;</div><div class=\"line\">                            if(GlobalParams.IMAGE_ALLOW_END[i].equals(fileExtName))&#123;</div><div class=\"line\">                                allowCount = true;</div><div class=\"line\">                                break;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if(!allowCount)&#123;</div><div class=\"line\">                            DebugLog.logger.info(&quot;文件后缀不正确&quot;);</div><div class=\"line\">                            result = GsonUtil.objectToString(new ImagePath(&quot;-2&quot;, &quot;文件格式不正确&quot;));</div><div class=\"line\">                            response.getOutputStream().write(result.getBytes(ENCODING));</div><div class=\"line\">                            return;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //获取item上传的输入流</div><div class=\"line\">                        //获取唯一名，随机生成</div><div class=\"line\">                        String saveFileName= FileUtil.makeFileName(fileExtName);</div><div class=\"line\">                        //根据文件名记性hash生成文件夹</div><div class=\"line\">                        String filePath = FileUtil.makePath(saveFileName, &quot;&quot;);</div><div class=\"line\">                        String realFilePath = imgPath + filePath;</div><div class=\"line\">                        //用于url生成</div><div class=\"line\">                        String otherFilePath = request.getContextPath() + File.separator + &quot;extimg&quot; + filePath;</div><div class=\"line\">                        //创建文件夹</div><div class=\"line\">                        File filePathFile = new File(realFilePath);</div><div class=\"line\">                        if (!filePathFile.exists()) &#123;</div><div class=\"line\">                            filePathFile.mkdirs();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //创建文件</div><div class=\"line\">                        File file = new File(filePathFile,saveFileName);</div><div class=\"line\">                        if (!file.exists()) &#123;</div><div class=\"line\">                            file.createNewFile();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        DebugLog.logger.debug(&quot;本地创建的文件路径：&quot;+file.getAbsolutePath());</div><div class=\"line\">                        is = fileItem.getInputStream();</div><div class=\"line\">                        os = new FileOutputStream(file);</div><div class=\"line\">                        //创建一个缓冲区</div><div class=\"line\">                        byte[] buff = new byte[2048];</div><div class=\"line\">                        int len = 0;</div><div class=\"line\">                        while((len = is.read(buff)) != -1)&#123;</div><div class=\"line\">                            os.write(buff, 0, len);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //删除处理文件的临时文件</div><div class=\"line\">                        fileItem.delete();</div><div class=\"line\">                        otherFilePath = GlobalParams.SERVER_URL + otherFilePath + File.separator + saveFileName;</div><div class=\"line\">                        otherFilePath =  otherFilePath.replace(&apos;\\\\&apos;, &apos;/&apos;);</div><div class=\"line\">                        DebugLog.logger.debug(&quot;生成的图片url为:&quot;+otherFilePath);</div><div class=\"line\">                        imageLists.add(otherFilePath);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                result = GsonUtil.objectToString(new ImagePath(imageLists));</div><div class=\"line\">                response.getOutputStream().write(result.getBytes(ENCODING));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (FileUploadException e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;文件上传失败&quot;, e);</div><div class=\"line\">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;不支持的编码格式&quot;, e);</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;文件读写失败&quot;, e);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;文件上传未知异常&quot;, e);</div><div class=\"line\">        &#125;finally&#123;</div><div class=\"line\">            //关闭流</div><div class=\"line\">            if(is != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if(os != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    os.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"FileUtil-代码\"><a href=\"#FileUtil-代码\" class=\"headerlink\" title=\"FileUtil 代码\"></a>FileUtil 代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class FileUtil &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 根据文件后缀生成一个随机的文件名</div><div class=\"line\">     * @param fileExtName</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static String makeFileName(String fileExtName)&#123;  </div><div class=\"line\">        //为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名</div><div class=\"line\">        return UUID.randomUUID().toString() + &quot;.&quot; + fileExtName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 为防止一个目录下面出现太多文件，要使用hash算法打散存储</div><div class=\"line\">     *</div><div class=\"line\">     * @param filename 文件名，要根据文件名生成存储目录</div><div class=\"line\">     * @param savePath 文件存储路径</div><div class=\"line\">     * @return 新的存储目录</div><div class=\"line\">     */ </div><div class=\"line\">    public static String makePath(String filename,String savePath)&#123;</div><div class=\"line\">        //得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址</div><div class=\"line\">        int hashcode = filename.hashCode();</div><div class=\"line\">        int dir1 = hashcode&amp;0xf;  //0--15</div><div class=\"line\">        int dir2 = (hashcode&amp;0xf0)&gt;&gt;4;  //0-15</div><div class=\"line\">        int dir3 = (int) (100000 + Math.random()*999999);</div><div class=\"line\">        //构造新的保存目录</div><div class=\"line\">        String dir = savePath + File.separator + dir1 + File.separator + dir2 + File.separator + dir3;  //upload\\2\\3  upload\\3\\5</div><div class=\"line\">//\t\t//File既可以代表文件也可以代表目录</div><div class=\"line\">//\t\tFile file = new File(dir);</div><div class=\"line\">//\t\t//如果目录不存在</div><div class=\"line\">//\t\tif(!file.exists())&#123;</div><div class=\"line\">//\t\t\t//创建目录</div><div class=\"line\">//\t\t\tfile.mkdirs();</div><div class=\"line\">//\t\t&#125;</div><div class=\"line\">        return dir;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 得到要删除图片的真实路径</div><div class=\"line\">     * @param request</div><div class=\"line\">     * @param tempPath</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static String getLocalImageUrl(String tempPath)&#123;</div><div class=\"line\">        String url = &quot;&quot;;</div><div class=\"line\">        String[] strs = tempPath.split(&quot;/&quot;);</div><div class=\"line\">        for (int i = 0; i &lt; strs.length; i++) &#123;</div><div class=\"line\">            System.out.println(strs[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">//\t\turl = GlobalParams.path+File.separator+strs[5]+File.separator+strs[6];</div><div class=\"line\">        System.out.println(url);\t\t</div><div class=\"line\">        return url;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(makePath(&quot;1.jpg&quot;, &quot;Path&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"app端\"><a href=\"#app端\" class=\"headerlink\" title=\"app端\"></a>app端</h3><pre><code>app 端利用httpConnection，并设置请求方式为post，将context-type改为multipart/form-data,一定要注意分割符的位置，我是因为这导致两种上传不成功，一是服务器端明明能接收\n到文件，但是就是从request解析的时候为空，二是批量上传的时候发现只能上传成功一张，服务器并没有解析出多个文件。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 上传图片</div><div class=\"line\"> * @param files</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">public static String uploadImage(List&lt;File&gt; files) &#123;</div><div class=\"line\">    URL url;</div><div class=\"line\">    DataOutputStream ds = null;</div><div class=\"line\">    BufferedReader bufferedReader = null;</div><div class=\"line\">    //为了分割</div><div class=\"line\">    String end = &quot;\\r\\n&quot;;</div><div class=\"line\">    String Hyphens = &quot;--&quot;;</div><div class=\"line\">    String boundary = &quot;WUm4580jbtwfJhNp7zi1djFEO3wNNm&quot;;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        if (files != null &amp;&amp; files.size() &gt; 0) &#123;</div><div class=\"line\">            url = new URL(ConstantValue.URL_ROOT + ConstantValue.IMAGE_UPLOAD);</div><div class=\"line\">            // 打开链接</div><div class=\"line\">            URLConnection connection = url.openConnection();</div><div class=\"line\">            HttpURLConnection httpURLConnection = (HttpURLConnection) connection;</div><div class=\"line\">            httpURLConnection.setRequestMethod(&quot;POST&quot;);</div><div class=\"line\">            httpURLConnection.setReadTimeout(30000);</div><div class=\"line\">            httpURLConnection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</div><div class=\"line\">            httpURLConnection.setRequestProperty(&quot;Content-type&quot;, &quot;multipart/form-data;boundary=&quot; + boundary);</div><div class=\"line\">            httpURLConnection.setRequestProperty(&quot;charset&quot;, &quot;utf-8&quot;);</div><div class=\"line\">            httpURLConnection.setUseCaches(false);</div><div class=\"line\">            httpURLConnection.setDoInput(true);</div><div class=\"line\">            httpURLConnection.setDoOutput(true);</div><div class=\"line\">            ds = new DataOutputStream(httpURLConnection.getOutputStream());</div><div class=\"line\">            for (int i = 0;i&lt;files.size();i++) &#123;</div><div class=\"line\">                File file = files.get(i);</div><div class=\"line\">                //注意加上分隔符此时只有一个Hyphens</div><div class=\"line\">                ds.writeBytes(Hyphens + boundary + end);</div><div class=\"line\">                //这里的格式不能改变，我将name换了别的名字结果服务器端不能正常接收文件</div><div class=\"line\">                ds.writeBytes(&quot;Content-Disposition: form-data; &quot;</div><div class=\"line\">                        + &quot;name=\\&quot;file&quot;+i+&quot;\\&quot;;filename=\\&quot;&quot; + file.getName() + &quot;\\&quot;&quot; + end);</div><div class=\"line\">                ds.writeBytes(end);</div><div class=\"line\">                FileInputStream fStream = new FileInputStream(file);</div><div class=\"line\">                byte[] buff = new byte[1024];</div><div class=\"line\">                int length = -1;</div><div class=\"line\">                while((length = fStream.read(buff)) != -1)&#123;</div><div class=\"line\">                    ds.write(buff,0,length);</div><div class=\"line\">                &#125;</div><div class=\"line\">                ds.writeBytes(end);</div><div class=\"line\">                fStream.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">            //结尾分隔符，注意此处为Hyphens + boundary + Hyphens+ end,有两个Hyphens，我刚开始没注意，结果就是不能批量上传文件</div><div class=\"line\">            ds.writeBytes(Hyphens + boundary + Hyphens+ end);</div><div class=\"line\">            ds.flush();</div><div class=\"line\">            bufferedReader = new BufferedReader(</div><div class=\"line\">                    new InputStreamReader(httpURLConnection.getInputStream(),&quot;UTF-8&quot;));</div><div class=\"line\">            String jsonString2 = bufferedReader.readLine();</div><div class=\"line\">            Logger.d(jsonString2);</div><div class=\"line\">            return jsonString2;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; catch (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;finally &#123;</div><div class=\"line\">        if(ds != null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                ds.close();</div><div class=\"line\">            &#125; catch (Exception e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(bufferedReader != null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                bufferedReader.close();</div><div class=\"line\">            &#125; catch (Exception e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>有时候觉得自己还是不够认真，在网上搜了这方面的经验和代码，结果自己实现的时候会因为一些稍微不一样的地方导致各种不成功，就很无奈，后来就慢慢排查，细心一点就可以找到问题的关键了，<br>暂时只写了一种客户端的实现上传的办法，还有一种是利用httpClient进行上传文件，代码稍有不同，之后再补上。关于分隔符的问题还没搞懂，没有去研究其实现原理，可能也存在误解，但这份代码时测试的没有问题的。</p>\n","excerpt":"","more":"<h3 id=\"前言·\"><a href=\"#前言·\" class=\"headerlink\" title=\"前言·\"></a>前言·</h3><p>最近在做毕设，然后app需要发送图文消息，就需要在app端实现图片上传，在web端实现文件接收，中间遇到点小意外，记在这里。</p>\n<h3 id=\"1-开发所需第三方jar包\"><a href=\"#1-开发所需第三方jar包\" class=\"headerlink\" title=\"1.开发所需第三方jar包\"></a>1.开发所需第三方jar包</h3><pre><code>app端：HttpURLConnection(jdk自带)\nweb端: commons-fileupload\nmaven路径：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;dependency&gt;</div><div class=\"line\">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</div><div class=\"line\">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</div><div class=\"line\">&lt;version&gt;1.3.2&lt;/version&gt;</div><div class=\"line\"> &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-JavaWeb端代码\"><a href=\"#2-JavaWeb端代码\" class=\"headerlink\" title=\"2.JavaWeb端代码\"></a>2.JavaWeb端代码</h3><pre><code>服务器端主要是为了接收客户端的请求，从请求解析出文件，可支持多文件上传，并创建了文件夹和随机名字，以保证生成的文件路径唯一，这里路径有两个，一个是保存的本地真实路径，用于\n写文件，第二个是为了生成url，便于客户端访问，并以json的方式进行返回。\n</code></pre><h4 id=\"Controller代码\"><a href=\"#Controller代码\" class=\"headerlink\" title=\"Controller代码\"></a>Controller代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStream;</div><div class=\"line\">import java.io.OutputStream;</div><div class=\"line\">import java.io.UnsupportedEncodingException;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\">import javax.servlet.http.HttpServletRequest;</div><div class=\"line\">import javax.servlet.http.HttpServletResponse;</div><div class=\"line\">import org.apache.commons.fileupload.FileItem;</div><div class=\"line\">import org.apache.commons.fileupload.FileUploadException;</div><div class=\"line\">import org.apache.commons.fileupload.ProgressListener;</div><div class=\"line\">import org.apache.commons.fileupload.disk.DiskFileItemFactory;</div><div class=\"line\">import org.apache.commons.fileupload.servlet.ServletFileUpload;</div><div class=\"line\">import org.springframework.stereotype.Controller;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</div><div class=\"line\">import com.aygxy.fmaket.bean.ImagePath;</div><div class=\"line\">import com.aygxy.fmaket.debug.DebugLog;</div><div class=\"line\">import com.aygxy.fmaket.param.GlobalParams;</div><div class=\"line\">import com.aygxy.fmaket.util.FileUtil;</div><div class=\"line\">import com.aygxy.fmaket.util.GsonUtil;</div><div class=\"line\"></div><div class=\"line\">@Controller</div><div class=\"line\">@RequestMapping(&quot;file&quot;)</div><div class=\"line\">public class FileAction &#123;</div><div class=\"line\"></div><div class=\"line\">    private final static String ENCODING = &quot;utf-8&quot;;</div><div class=\"line\"></div><div class=\"line\">    static&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(&quot;imgUpload.action&quot;)</div><div class=\"line\">    public void imageUpload(HttpServletRequest request,HttpServletResponse response)&#123;</div><div class=\"line\">        //创建工厂</div><div class=\"line\">        DiskFileItemFactory factory = new DiskFileItemFactory();</div><div class=\"line\">        //设置缓冲区的大小</div><div class=\"line\">        factory.setSizeThreshold(1024*1024*5);</div><div class=\"line\">        String result = &quot;&quot;;</div><div class=\"line\">        //本地服务器真实路径</div><div class=\"line\">        String imgPath = request.getSession().getServletContext().getRealPath(File.separator+&quot;extimg&quot;);</div><div class=\"line\">        //上传时生成的临时文件保存目录</div><div class=\"line\">        String tempPath = request.getSession().getServletContext().getRealPath(File.separator+&quot;temp&quot;);</div><div class=\"line\">        //设置上传文件临时文件的保存路径</div><div class=\"line\">        File tmpFile = new File(tempPath);</div><div class=\"line\">        if (!tmpFile.exists()) &#123;</div><div class=\"line\">            //创建临时目录</div><div class=\"line\">            tmpFile.mkdir();</div><div class=\"line\">        &#125;</div><div class=\"line\">        factory.setRepository(tmpFile);</div><div class=\"line\">        InputStream is = null;</div><div class=\"line\">        OutputStream os = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //创建一个文件上传解析器</div><div class=\"line\">            ServletFileUpload upload = new ServletFileUpload(factory);</div><div class=\"line\">            upload.setProgressListener(new ProgressListener() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void update(long pBytesRead, long pContentLength, int arg2) &#123;</div><div class=\"line\">                    DebugLog.logger.info(&quot;文件大小为：&quot; + pContentLength + &quot;,当前已处理：&quot; + pBytesRead);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            //设置编码格式 </div><div class=\"line\">            upload.setHeaderEncoding(ENCODING);</div><div class=\"line\">            //判断是否是表单提交</div><div class=\"line\">            if(!ServletFileUpload.isMultipartContent(request))&#123;</div><div class=\"line\">                DebugLog.logger.info(&quot;不正确的文件格式&quot;);</div><div class=\"line\">                result = GsonUtil.objectToString(new ImagePath(&quot;-1&quot;, &quot;不正确的文件格式&quot;));</div><div class=\"line\">                response.getOutputStream().write(result.getBytes(ENCODING));</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //设置图片最大限制</div><div class=\"line\">            upload.setFileSizeMax(1024*1024);</div><div class=\"line\">            //使用解析器对上传的文件进行解析</div><div class=\"line\">            List&lt;FileItem&gt; list = upload.parseRequest(request);</div><div class=\"line\">            DebugLog.logger.debug(&quot;解析出的文件列表为&quot;+list.toString());</div><div class=\"line\">            if(list.size() &gt; 0 )&#123;</div><div class=\"line\">                List&lt;String&gt; imageLists = new ArrayList&lt;String&gt;();</div><div class=\"line\">                for (FileItem fileItem : list) &#123;</div><div class=\"line\">                    //如果封装的是普通的数据</div><div class=\"line\">                    if (fileItem.isFormField() &amp;&amp; fileItem.getSize() &gt; 0) &#123;</div><div class=\"line\">                        String requestName = fileItem.getFieldName();</div><div class=\"line\">                        //解决普通输入项的中文乱码问题</div><div class=\"line\">                        String requestValue = fileItem.getString(ENCODING);</div><div class=\"line\">                        DebugLog.logger.info(&quot;文件上传携带参数==&gt;&quot;+requestName+&quot;:&quot;+requestValue);</div><div class=\"line\">                    &#125;else&#123;\t//封装的是上传的文件</div><div class=\"line\">                        //得到上传的文件名</div><div class=\"line\">                        String fileName = fileItem.getName();</div><div class=\"line\">                        DebugLog.logger.debug(&quot;上传文件的文件名：&quot;+fileName);</div><div class=\"line\">                        if (fileName == null || fileName.trim().equals(&quot;&quot;)) &#123;</div><div class=\"line\">                            continue;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，</div><div class=\"line\">                        //如：  c:\\a\\b\\1.txt，而有些只是单纯的文件名，如：1.txt</div><div class=\"line\">                        //处理获取到的上传文件的文件名的路径部分，只保留文件名</div><div class=\"line\">                        fileName = fileName.substring(fileName.lastIndexOf(&quot;\\\\&quot;)+1);</div><div class=\"line\">                        //得到上传文件的扩展名</div><div class=\"line\">                        String fileExtName = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1);</div><div class=\"line\">                        DebugLog.logger.debug(&quot;上传的文件的扩展名是：&quot;+fileExtName);</div><div class=\"line\">                        boolean allowCount = false;</div><div class=\"line\">                        for(int i = 0;i&lt;GlobalParams.IMAGE_ALLOW_END.length;i++)&#123;</div><div class=\"line\">                            if(GlobalParams.IMAGE_ALLOW_END[i].equals(fileExtName))&#123;</div><div class=\"line\">                                allowCount = true;</div><div class=\"line\">                                break;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if(!allowCount)&#123;</div><div class=\"line\">                            DebugLog.logger.info(&quot;文件后缀不正确&quot;);</div><div class=\"line\">                            result = GsonUtil.objectToString(new ImagePath(&quot;-2&quot;, &quot;文件格式不正确&quot;));</div><div class=\"line\">                            response.getOutputStream().write(result.getBytes(ENCODING));</div><div class=\"line\">                            return;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //获取item上传的输入流</div><div class=\"line\">                        //获取唯一名，随机生成</div><div class=\"line\">                        String saveFileName= FileUtil.makeFileName(fileExtName);</div><div class=\"line\">                        //根据文件名记性hash生成文件夹</div><div class=\"line\">                        String filePath = FileUtil.makePath(saveFileName, &quot;&quot;);</div><div class=\"line\">                        String realFilePath = imgPath + filePath;</div><div class=\"line\">                        //用于url生成</div><div class=\"line\">                        String otherFilePath = request.getContextPath() + File.separator + &quot;extimg&quot; + filePath;</div><div class=\"line\">                        //创建文件夹</div><div class=\"line\">                        File filePathFile = new File(realFilePath);</div><div class=\"line\">                        if (!filePathFile.exists()) &#123;</div><div class=\"line\">                            filePathFile.mkdirs();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //创建文件</div><div class=\"line\">                        File file = new File(filePathFile,saveFileName);</div><div class=\"line\">                        if (!file.exists()) &#123;</div><div class=\"line\">                            file.createNewFile();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        DebugLog.logger.debug(&quot;本地创建的文件路径：&quot;+file.getAbsolutePath());</div><div class=\"line\">                        is = fileItem.getInputStream();</div><div class=\"line\">                        os = new FileOutputStream(file);</div><div class=\"line\">                        //创建一个缓冲区</div><div class=\"line\">                        byte[] buff = new byte[2048];</div><div class=\"line\">                        int len = 0;</div><div class=\"line\">                        while((len = is.read(buff)) != -1)&#123;</div><div class=\"line\">                            os.write(buff, 0, len);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //删除处理文件的临时文件</div><div class=\"line\">                        fileItem.delete();</div><div class=\"line\">                        otherFilePath = GlobalParams.SERVER_URL + otherFilePath + File.separator + saveFileName;</div><div class=\"line\">                        otherFilePath =  otherFilePath.replace(&apos;\\\\&apos;, &apos;/&apos;);</div><div class=\"line\">                        DebugLog.logger.debug(&quot;生成的图片url为:&quot;+otherFilePath);</div><div class=\"line\">                        imageLists.add(otherFilePath);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                result = GsonUtil.objectToString(new ImagePath(imageLists));</div><div class=\"line\">                response.getOutputStream().write(result.getBytes(ENCODING));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (FileUploadException e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;文件上传失败&quot;, e);</div><div class=\"line\">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;不支持的编码格式&quot;, e);</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;文件读写失败&quot;, e);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            DebugLog.logger.error(&quot;文件上传未知异常&quot;, e);</div><div class=\"line\">        &#125;finally&#123;</div><div class=\"line\">            //关闭流</div><div class=\"line\">            if(is != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if(os != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    os.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"FileUtil-代码\"><a href=\"#FileUtil-代码\" class=\"headerlink\" title=\"FileUtil 代码\"></a>FileUtil 代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class FileUtil &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 根据文件后缀生成一个随机的文件名</div><div class=\"line\">     * @param fileExtName</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static String makeFileName(String fileExtName)&#123;  </div><div class=\"line\">        //为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名</div><div class=\"line\">        return UUID.randomUUID().toString() + &quot;.&quot; + fileExtName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 为防止一个目录下面出现太多文件，要使用hash算法打散存储</div><div class=\"line\">     *</div><div class=\"line\">     * @param filename 文件名，要根据文件名生成存储目录</div><div class=\"line\">     * @param savePath 文件存储路径</div><div class=\"line\">     * @return 新的存储目录</div><div class=\"line\">     */ </div><div class=\"line\">    public static String makePath(String filename,String savePath)&#123;</div><div class=\"line\">        //得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址</div><div class=\"line\">        int hashcode = filename.hashCode();</div><div class=\"line\">        int dir1 = hashcode&amp;0xf;  //0--15</div><div class=\"line\">        int dir2 = (hashcode&amp;0xf0)&gt;&gt;4;  //0-15</div><div class=\"line\">        int dir3 = (int) (100000 + Math.random()*999999);</div><div class=\"line\">        //构造新的保存目录</div><div class=\"line\">        String dir = savePath + File.separator + dir1 + File.separator + dir2 + File.separator + dir3;  //upload\\2\\3  upload\\3\\5</div><div class=\"line\">//\t\t//File既可以代表文件也可以代表目录</div><div class=\"line\">//\t\tFile file = new File(dir);</div><div class=\"line\">//\t\t//如果目录不存在</div><div class=\"line\">//\t\tif(!file.exists())&#123;</div><div class=\"line\">//\t\t\t//创建目录</div><div class=\"line\">//\t\t\tfile.mkdirs();</div><div class=\"line\">//\t\t&#125;</div><div class=\"line\">        return dir;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 得到要删除图片的真实路径</div><div class=\"line\">     * @param request</div><div class=\"line\">     * @param tempPath</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static String getLocalImageUrl(String tempPath)&#123;</div><div class=\"line\">        String url = &quot;&quot;;</div><div class=\"line\">        String[] strs = tempPath.split(&quot;/&quot;);</div><div class=\"line\">        for (int i = 0; i &lt; strs.length; i++) &#123;</div><div class=\"line\">            System.out.println(strs[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">//\t\turl = GlobalParams.path+File.separator+strs[5]+File.separator+strs[6];</div><div class=\"line\">        System.out.println(url);\t\t</div><div class=\"line\">        return url;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        System.out.println(makePath(&quot;1.jpg&quot;, &quot;Path&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"app端\"><a href=\"#app端\" class=\"headerlink\" title=\"app端\"></a>app端</h3><pre><code>app 端利用httpConnection，并设置请求方式为post，将context-type改为multipart/form-data,一定要注意分割符的位置，我是因为这导致两种上传不成功，一是服务器端明明能接收\n到文件，但是就是从request解析的时候为空，二是批量上传的时候发现只能上传成功一张，服务器并没有解析出多个文件。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 上传图片</div><div class=\"line\"> * @param files</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">public static String uploadImage(List&lt;File&gt; files) &#123;</div><div class=\"line\">    URL url;</div><div class=\"line\">    DataOutputStream ds = null;</div><div class=\"line\">    BufferedReader bufferedReader = null;</div><div class=\"line\">    //为了分割</div><div class=\"line\">    String end = &quot;\\r\\n&quot;;</div><div class=\"line\">    String Hyphens = &quot;--&quot;;</div><div class=\"line\">    String boundary = &quot;WUm4580jbtwfJhNp7zi1djFEO3wNNm&quot;;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        if (files != null &amp;&amp; files.size() &gt; 0) &#123;</div><div class=\"line\">            url = new URL(ConstantValue.URL_ROOT + ConstantValue.IMAGE_UPLOAD);</div><div class=\"line\">            // 打开链接</div><div class=\"line\">            URLConnection connection = url.openConnection();</div><div class=\"line\">            HttpURLConnection httpURLConnection = (HttpURLConnection) connection;</div><div class=\"line\">            httpURLConnection.setRequestMethod(&quot;POST&quot;);</div><div class=\"line\">            httpURLConnection.setReadTimeout(30000);</div><div class=\"line\">            httpURLConnection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</div><div class=\"line\">            httpURLConnection.setRequestProperty(&quot;Content-type&quot;, &quot;multipart/form-data;boundary=&quot; + boundary);</div><div class=\"line\">            httpURLConnection.setRequestProperty(&quot;charset&quot;, &quot;utf-8&quot;);</div><div class=\"line\">            httpURLConnection.setUseCaches(false);</div><div class=\"line\">            httpURLConnection.setDoInput(true);</div><div class=\"line\">            httpURLConnection.setDoOutput(true);</div><div class=\"line\">            ds = new DataOutputStream(httpURLConnection.getOutputStream());</div><div class=\"line\">            for (int i = 0;i&lt;files.size();i++) &#123;</div><div class=\"line\">                File file = files.get(i);</div><div class=\"line\">                //注意加上分隔符此时只有一个Hyphens</div><div class=\"line\">                ds.writeBytes(Hyphens + boundary + end);</div><div class=\"line\">                //这里的格式不能改变，我将name换了别的名字结果服务器端不能正常接收文件</div><div class=\"line\">                ds.writeBytes(&quot;Content-Disposition: form-data; &quot;</div><div class=\"line\">                        + &quot;name=\\&quot;file&quot;+i+&quot;\\&quot;;filename=\\&quot;&quot; + file.getName() + &quot;\\&quot;&quot; + end);</div><div class=\"line\">                ds.writeBytes(end);</div><div class=\"line\">                FileInputStream fStream = new FileInputStream(file);</div><div class=\"line\">                byte[] buff = new byte[1024];</div><div class=\"line\">                int length = -1;</div><div class=\"line\">                while((length = fStream.read(buff)) != -1)&#123;</div><div class=\"line\">                    ds.write(buff,0,length);</div><div class=\"line\">                &#125;</div><div class=\"line\">                ds.writeBytes(end);</div><div class=\"line\">                fStream.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">            //结尾分隔符，注意此处为Hyphens + boundary + Hyphens+ end,有两个Hyphens，我刚开始没注意，结果就是不能批量上传文件</div><div class=\"line\">            ds.writeBytes(Hyphens + boundary + Hyphens+ end);</div><div class=\"line\">            ds.flush();</div><div class=\"line\">            bufferedReader = new BufferedReader(</div><div class=\"line\">                    new InputStreamReader(httpURLConnection.getInputStream(),&quot;UTF-8&quot;));</div><div class=\"line\">            String jsonString2 = bufferedReader.readLine();</div><div class=\"line\">            Logger.d(jsonString2);</div><div class=\"line\">            return jsonString2;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; catch (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;finally &#123;</div><div class=\"line\">        if(ds != null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                ds.close();</div><div class=\"line\">            &#125; catch (Exception e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(bufferedReader != null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                bufferedReader.close();</div><div class=\"line\">            &#125; catch (Exception e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>有时候觉得自己还是不够认真，在网上搜了这方面的经验和代码，结果自己实现的时候会因为一些稍微不一样的地方导致各种不成功，就很无奈，后来就慢慢排查，细心一点就可以找到问题的关键了，<br>暂时只写了一种客户端的实现上传的办法，还有一种是利用httpClient进行上传文件，代码稍有不同，之后再补上。关于分隔符的问题还没搞懂，没有去研究其实现原理，可能也存在误解，但这份代码时测试的没有问题的。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Hexo搭建博客小白教程/20161122214120.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161122214120.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161122214451.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161122214451.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123075138.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123075138.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123080021.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123080021.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123205751.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123205751.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123205923.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123205923.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123210805.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123210805.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123210936.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123210936.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/20161123213034.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"20161123213034.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/github_sign_up.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"github_sign_up.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo搭建博客小白教程/github_signup_info.png","post":"cj085wmuu0000wwayy5tkzo2e","slug":"github_signup_info.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj085wmuu0000wwayy5tkzo2e","category_id":"cj085wmv10002wwayc4dg6qpu","_id":"cj085wmv90008wwayhfu1yplm"},{"post_id":"cj085wmv40004wwayf6dybqbn","category_id":"cj085wmv60005wwayr4t8ee95","_id":"cj085wmv9000awwayftgosy1r"}],"PostTag":[{"post_id":"cj085wmuu0000wwayy5tkzo2e","tag_id":"cj085wmv40003wwayzxuhoqjj","_id":"cj085wmv80007wway02nj6sm3"},{"post_id":"cj085wmv40004wwayf6dybqbn","tag_id":"cj085wmv80006wwayk7wp3rhl","_id":"cj085wmv90009wway0f2h42kf"}],"Tag":[{"name":"hexo","_id":"cj085wmv40003wwayzxuhoqjj"},{"name":"--Java --app","_id":"cj085wmv80006wwayk7wp3rhl"}]}}